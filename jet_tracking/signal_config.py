
record_dict = {
    'asyn': {
        'desc': 'asyn Record',
        'reference': 'http://aps.anl.gov/epics/modules/soft/asyn/R3-1/asynRecord.html',
        'usage':  'See referrence.', 
        'fields': {
            'value':                  ('VAL', 'value'),
            'name':                   ('NAME', 'PV Name'),
            'description':            ('DESC', 'Description'),
            'device_type':            ('DTYP', 'Device type'),
            'record_type':            ('RTYP', 'Record Type'),
            'port':                   ('PORT', 'asyn port'),
            'address':                ('ADDR', 'asyn address'),
            'socket':                 ('SOCK', 'asyn socket address'),
            'trans_mode':             ('TMOD', 'Transaction Mode'),
            'timeout':                ('TMOT', 'Timeout (sec)'),
            'output_string':          ('AOUT', 'Output String'),
            'output_byte':            ('BOUT', 'Output Byte Data'),
            'output_terminator':      ('OEOS', 'Output Terminator'),
            'bytes_to_write':         ('NOWT', 'Number of bytes to write'),
            'bytes_written':          ('NAWT', 'Number of bytes written'),
            'output_format':          ('OFMT', 'Output format'),
            'input_string':           ('AINP', 'Input string'),
            'input_byte':             ('BINP', 'Input byte data'),
            'input_terminator':       ('IEOS', 'Input terminator'),
            'input_max_size':         ('IMAX', 'Input array max size'),
            'bytes_to_read':          ('NRRD', 'Number of bytes to read'),
            'bytes_read':             ('NORD', 'Number of bytes read'),
            'input_format':           ('IFMT', 'Input format'),
            'translated_input':       ('TINP', 'Translated input'),
            'baud_rate':              ('BAUD', 'Serial port Baud rate'),
            'parity':                 ('PRTY', 'S3rial port Parity'),
            'data_bits':              ('DBIT', 'Serial port Data bits'),
            'stop_bits':              ('SBIT', 'Serial port Stop bits'),
            'flow_control':           ('FCTL', 'Serial port Flow control'),
            'serial_poll_resp':       ('SPR',  'Serial Poll Response for GPIB'),
            'universal_cmd':          ('UCMD', 'Universal command for GPIB'),
            'address_cmd':            ('ACMD', 'Address command for GPIB'),
            'autoconnect':            ('AUCT', 'Set Autoconnect Option'),
            'enable':                 ('ENBL', 'Enable or disable port'),
            'connect':                ('CNCT', 'Connect or disconnect the device'),
            'error_status':           ('ERRS', 'Error status string'),
            },
        'init':  ['NAME', 'DESC', 'VAL', 'RTYP', 'DTYP'],
        'config': ['DESC', 'DTYP']
        },
    'fanout': {
        'desc': 'fanout Record',
        'reference': 'https://wiki-ext.aps.anl.gov/epics/index.php/RRM_3-14_Fanout',
        'usage':  'See referrence.', 
        'fields': {
            'value':                  ('VAL', 'value'),
            'name':                   ('NAME', 'PV Name'),
            'description':            ('DESC', 'Description'),
            'device_type':            ('DTYP', 'Device type'),
            'record_type':            ('RTYP', 'Record Type'),
            'FLNK':                   ('FLNK', ''),
            'LNK1':                   ('LNK1', 'Forward Link 1'),
            'LNK2':                   ('LNK2', 'Forward Link 2'),
            'LNK3':                   ('LNK3', 'Forward Link 3'),
            'LNK4':                   ('LNK4', 'Forward Link 4'),
            'LNK5':                   ('LNK5', 'Forward Link 5'),
            'LNK6':                   ('LNK6', 'Forward Link 6'),
            'select_mechanism':       ('SELM', 'Select mechanism'),
            'select_algorithm':       ('SELN', 'Link selection algorithm'),
            },
        'init':  ['NAME', 'DESC', 'VAL', 'RTYP', 'DTYP'],
        'config': ['DESC', 'DTYP']
        },
    'dfanout': {
        'desc': 'dfanout Record',
        'reference': 'https://wiki-ext.aps.anl.gov/epics/index.php/RRM_3-14_Fanout',
        'usage':  'See referrence.', 
        'fields': {
            'value':                  ('VAL', 'value'),
            'name':                   ('NAME', 'PV Name'),
            'description':            ('DESC', 'Description'),
            'device_type':            ('DTYP', 'Device type'),
            'record_type':            ('RTYP', 'Record Type'),
            'FLNK':                   ('FLNK', ''),
#            'high_opr':               ('HOPR', 'high opr'),
#            'low_opr':                ('LOPR', 'low opr'), 
#            'LNK1':                   ('LNK1', 'Forward Link 1'),
#            'LNK2':                   ('LNK2', 'Forward Link 2'),
#            'LNK3':                   ('LNK3', 'Forward Link 3'),
#            'LNK4':                   ('LNK4', 'Forward Link 4'),
#            'LNK5':                   ('LNK5', 'Forward Link 5'),
#            'LNK6':                   ('LNK6', 'Forward Link 6'),
            'OUTA':                   ('OUTA', ''),
            'OUTB':                   ('OUTB', ''),
            'OUTC':                   ('OUTC', ''),
            'OUTD':                   ('OUTD', ''),
            'OUTE':                   ('OUTE', ''),
            'OUTF':                   ('OUTF', ''),
            'OUTG':                   ('OUTG', ''),
            'OUTH':                   ('OUTH', ''),
            'select_mechanism':       ('SELM', 'Select mechanism'),
            'select_algorithm':       ('SELN', 'Link selection algorithm'),
#            'select_location':        ('SELLdd', 'Link selection algorithm'),
            },
        'init':  ['NAME', 'DESC', 'VAL', 'RTYP', 'DTYP'],
        'config': ['DESC', 'DTYP']
        },
    'lkup': {
        'desc': 'Lookup Record',
        'reference': '',
        'usage':  'None', 
        'fields': {
            'value':                  ('VAL', 'value'),
            'name':                   ('NAME', 'PV Name'),
            'description':            ('DESC', 'Description'),
            'device_type':            ('DTYP', 'Device type'),
            'record_type':            ('RTYP', 'Record Type'),
            'output':                 ('OUT',  'Output Link'),
            'input':                  ('INP',  'Input Link'),
            'scan':                   ('SCAN', 'Scan mode'),
            },
        'init':  ['NAME', 'DESC', 'VAL', 'RTYP', 'DTYP'],
        'config': ['DESC', 'DTYP']
        },
    'waveform': {
        'desc': 'waveform Record',
        'reference': 'https://wiki-ext.aps.anl.gov/epics/index.php/RRM_3-14_Waveform',
        'usage':  'These fields are configurable by the user to specify how and from \
                   where the record reads its data', 
        'fields': {
            'value':                  ('VAL', 'value'),
            'name':                   ('NAME', 'PV Name'),
            'units':                  ('EGU',  'Engineering Units '),
            'precision':              ('PREC', 'Display Precision '),
            'description':            ('DESC', 'Description'),
            'device_type':            ('DTYP', 'Device type'),
            'record_type':            ('RTYP', 'Record Type'),
            'high_opr':               ('HOPR', 'high opr'),
            'low_opr':                ('LOPR', 'low opr'), 
            'nelements':              ('NELM', 'Number of elements'),
            'field_type':             ('FTVL', 'Field type of value'),
            'rearm':                  ('RARM', 'Rearm'),
            },
        'init':  ['NAME', 'DESC', 'VAL', 'EGU', 'PREC', 'RTYP', 'DTYP'],
        'config': ['DESC', 'DTYP', 'EGU']
        },
 
    'calc': {
        'desc': 'Calculation',
        'reference': 'http://www.aps.anl.gov/epics/EpicsDocumentation/AppDevManuals/RecordRef/Recordref-13.html',
        'usage':  'The calculation or Calc record is used to perform algebraic,  \
                   relational, and logical operations on values retrieved from other records. \
                   The result of its operations can then be accessed by another record  \
                   so that it can be used.', 
        'fields': {
            'value':                  ('VAL', 'value'),
            'units':                  ('EGU',  'Engineering Units '),
            'high_opr':               ('HOPR', 'high opr'),
            'low_opr':                ('LOPR', 'low opr'), 
            'precision':              ('PREC', 'Display Precision '),
            'name':                   ('NAME', 'PV Name'),
            'description':            ('DESC', 'Description'),
            'device_type':            ('DTYP', 'Device type'),
            'record_type':            ('RTYP', 'Record Type'),
            'calc':                   ('CALC', 'Calculation'),
            'input_a':                ('INPA', 'Input A'),
            'input_b':                ('INPB', 'Input B'),
            'input_c':                ('INPC', 'Input C'),
            'input_d':                ('INPD', 'Input D'),
            'input_e':                ('INPE', 'Input E'),
            'input_f':                ('INPF', 'Input F'),
            'input_g':                ('INPG', 'Input G'),
            'input_h':                ('INPH', 'Input H'),
            'input_i':                ('INPI', 'Input I'),
            'input_j':                ('INPJ', 'Input J'),
            'input_k':                ('INPK', 'Input K'),
            'input_l':                ('INPL', 'Input L'),
            'Avalue':                 ('A',    'Value A'),
            'Bvalue':                 ('B',    'Value B'),
            'Cvalue':                 ('C',    'Value C'),
            'Dvalue':                 ('D',    'Value D'),
            'Evalue':                 ('E',    'Value E'),
            'Fvalue':                 ('F',    'Value F'),
            'Gvalue':                 ('G',    'Value G'),
            'Hvalue':                 ('H',    'Value H'),
            'Ivalue':                 ('I',    'Value I'),
            'Jvalue':                 ('J',    'Value J'),
            'Kvalue':                 ('K',    'Value K'),
            'Lvalue':                 ('L',    'Value L'),
            },
        'init':  ['NAME', 'DESC', 'VAL', 'EGU', 'PREC', 'RTYP', 'DTYP'],
        'config': ['DESC', 'EGU', 'PREC', 'DTYP']
        },
    'calcout': {
        'desc': 'Calculation Output',
        'reference': 'http://www.aps.anl.gov/epics/EpicsDocumentation/AppDevManuals/RecordRef/Recordref-14.html#HEADING14-0',
        'usage':  'The Calculation Output or "Calcout" record is similar to the Calc record \
                   with the added feature of having outputs (an "output link" and an "output event") \
                   which are conditionally executed based on the result of the calculation. \
                   This feature allows conditional branching to be implemented within an \
                   EPICS database (e.g., process Record_A only if Record_B has a value of 0). \
                   The Calcout record is also similar to the Wait record (with additional features) \
                   but uses EPICS standard INLINK and OUTLINK fields rather than the DBF_STRING fields \
                   used in the Wait record. For new databases, it is recommended that the Calcout \
                   record be used instead of the Wait record.',
        'fields': {
            'value':                  ('VAL', 'value'),
            'units':                  ('EGU',  'Engineering Units '),
            'high_opr':               ('HOPR', 'high opr'),
            'low_opr':                ('LOPR', 'low opr'), 
            'precision':              ('PREC', 'Display Precision '),
            'name':                   ('NAME', 'PV Name'),
            'description':            ('DESC', 'Description'),
            'device_type':            ('DTYP', 'Device type'),
            'record_type':            ('RTYP', 'Record Type'),
            'calc':                   ('CALC', 'Calculation'),
            'output':                 ('OUT',  'Output Specification'),
            'out_exec_opt':           ('OOPT', 'Output Execute Option'),
            'out_data_opt':           ('DOPT', 'Output Data Option'),
            'out_calc':               ('OCAL', 'Output Calculation'),
            'out_value':              ('OVAL', 'Output Value'),
            'input_a':                ('INPA', 'Input A'),
            'input_b':                ('INPB', 'Input B'),
            'input_c':                ('INPC', 'Input C'),
            'input_d':                ('INPD', 'Input D'),
            'input_e':                ('INPE', 'Input E'),
            'input_f':                ('INPF', 'Input F'),
            'input_g':                ('INPG', 'Input G'),
            'input_h':                ('INPH', 'Input H'),
            'input_i':                ('INPI', 'Input I'),
            'input_j':                ('INPJ', 'Input J'),
            'input_k':                ('INPK', 'Input K'),
            'input_l':                ('INPL', 'Input L'),
            'Avalue':                 ('A',    'Value A'),
            'Bvalue':                 ('B',    'Value B'),
            'Cvalue':                 ('C',    'Value C'),
            'Dvalue':                 ('D',    'Value D'),
            'Evalue':                 ('E',    'Value E'),
            'Fvalue':                 ('F',    'Value F'),
            'Gvalue':                 ('G',    'Value G'),
            'Hvalue':                 ('H',    'Value H'),
            'Ivalue':                 ('I',    'Value I'),
            'Jvalue':                 ('J',    'Value J'),
            'Kvalue':                 ('K',    'Value K'),
            'Lvalue':                 ('L',    'Value L'),
            'out_pv_status':          ('OUTV', 'Out PV Status'),
            'calc_valid':             ('CLCV', 'Calc Valid'),
            'ocal_valid':             ('OCLV', 'Ocal Valid'),
            },
        'init':  ['NAME', 'DESC', 'VAL', 'EGU', 'PREC', 'RTYP', 'DTYP'],
        'config': ['DESC', 'EGU', 'PREC', 'DTYP']
        },

    'scalcout': {
        'desc': 'String Calculation Output',
        'reference': 'https://wiki-ext.aps.anl.gov/epics/index.php/RRM_3-13_String_Calcout',
        'usage':  'Similar to calcout record.',
        'fields': {
            'value':                  ('VAL', 'value'),
            'high_opr':               ('HOPR', 'high opr'),
            'low_opr':                ('LOPR', 'low opr'), 
            'name':                   ('NAME', 'PV Name'),
            'description':            ('DESC', 'Description'),
            'device_type':            ('DTYP', 'Device type'),
            'record_type':            ('RTYP', 'Record Type'),
            'calc':                   ('CALC', 'Calculation'),
            'output':                 ('OUT',  'Output Specification'),
            'out_exec_opt':           ('OOPT', 'Output Execute Option'),
            'out_data_opt':           ('DOPT', 'Output Data Option'),
            'out_calc':               ('OCAL', 'Output Calculation'),
            'out_value':              ('OVAL', 'Output Value'),
            'input_a':                ('INPA', 'Input A'),
            'input_b':                ('INPB', 'Input B'),
            'input_c':                ('INPC', 'Input C'),
            'input_d':                ('INPD', 'Input D'),
            'input_e':                ('INPE', 'Input E'),
            'input_f':                ('INPF', 'Input F'),
            'input_g':                ('INPG', 'Input G'),
            'input_h':                ('INPH', 'Input H'),
            'input_i':                ('INPI', 'Input I'),
            'input_j':                ('INPJ', 'Input J'),
            'input_k':                ('INPK', 'Input K'),
            'input_l':                ('INPL', 'Input L'),
            'Avalue':                 ('A',    'Value A'),
            'Bvalue':                 ('B',    'Value B'),
            'Cvalue':                 ('C',    'Value C'),
            'Dvalue':                 ('D',    'Value D'),
            'Evalue':                 ('E',    'Value E'),
            'Fvalue':                 ('F',    'Value F'),
            'Gvalue':                 ('G',    'Value G'),
            'Hvalue':                 ('H',    'Value H'),
            'Ivalue':                 ('I',    'Value I'),
            'Jvalue':                 ('J',    'Value J'),
            'Kvalue':                 ('K',    'Value K'),
            'Lvalue':                 ('L',    'Value L'),
            'out_pv_status':          ('OUTV', 'Out PV Status'),
            'calc_valid':             ('CLCV', 'Calc Valid'),
            'ocal_valid':             ('OCLV', 'Ocal Valid'),
            },
        'init':  ['NAME', 'DESC', 'VAL', 'RTYP', 'DTYP'],
        'config': ['DESC', 'DTYP']
        },
    'bo': {
        'desc': 'Binary Output',
        'reference': 'http://www.aps.anl.gov/epics/EpicsDocumentation/AppDevManuals/RecordRef/Recordref-12.html',
        'usage': 'The normal use for this record type is to store a simple bit (0 or 1) \
                  value to be sent to a Digital Output module. It can also be used to write \
                  binary values into other records via database or channel access links. \
                  This record can implement both latched and momentary binary outputs \
                  depending on how the HIGH field is configured.',
        'fields': {
            'value':                  ('VAL', 'value'),
#            'high_opr':               ('HOPR', 'high opr'),
#            'low_opr':                ('LOPR', 'low opr'), 
            'name':                   ('NAME', 'PV Name'),
            'description':            ('DESC', 'Description'),
            'device_type':            ('DTYP', 'Device type'),
            'record_type':            ('RTYP', 'Record Type'),
            'raw_value':              ('RVAL', 'Raw Value'),
            'zero_name':              ('ZNAM', 'Zero Name'),
            'one_name':               ('ONAM', 'One Name'),
            },
        'init':  ['NAME', 'DESC', 'VAL', 'RVAL', 'RTYP', 'DTYP'],
        'config': ['DESC', 'DTYP']
        },
    'mbbo': {
        'desc': 'Multi Binary Output',
        'reference': 'http://www.aps.anl.gov/epics/EpicsDocumentation/AppDevManuals/RecordRef/Recordref-25.html',
        'usage': 'The normal use for the mbbo record type is to send a binary value \
                  (representing one of up to 16 states) to a Digital Output module. \
                  It is used for any device that uses more than one bit to control it. \
                  The mbbo record can also be used to write discrete values to other \
                  records via database or channel access links.',
        'fields': {
            'value':                  ('VAL', 'value'),
            'name':                   ('NAME', 'PV Name'),
            'description':            ('DESC', 'Description'),
            'device_type':            ('DTYP', 'Device type'),
            'record_type':            ('RTYP', 'Record Type'),
            'raw_value':              ('RVAL', 'Raw Value  '),
            'output_link':            ('OUT',  'Output Link'),
            'shift':                  ('SHFT', 'Shift'),
            'states_defined':         ('SDEF', 'States Defined'),
            'zero_value':             ('ZRVL', 'Zero Value'),
            'one_value':              ('ONVL', 'One Value'),
            'two_value':              ('TWVL', 'Two Value'),
            'three_value':            ('THVL', 'Three Value'),
            'four_value':             ('FRVL', 'Four Value'),
            'five_value':             ('FVVL', 'Five Value'),
            'six_value':              ('SXVL', 'Six Value'),
            'seven_value':            ('SVVL', 'Seven Value'),
            'eight_value':            ('EIVL', 'Eight Value'),
            'nine_value':             ('NIVL', 'Nine Value'),
            'ten_value':              ('TEVL', 'Ten Value'),
            'eleven_value':           ('ELVL', 'Eleven Value'),
            'twelve_value':           ('TVVL', 'Twelve Value'),
            'thirteen_value':         ('TTVL', 'Thirteen Value'),
            'fourteen_value':         ('FTVL', 'Fourteen Value'),
            'fifteen_value':          ('FFVL', 'Fifteen Value'),
            'zero_string':            ('ZRST', 'Zero String'),
            'one_string':             ('ONST', 'One String'),
            'two_string':             ('TWST', 'Two String'),
            'three_string':           ('THST', 'Three String'),
            'four_string':            ('FRST', 'Four String'),
            'five_string':            ('FVST', 'Five String'),
            'six_string':             ('SXST', 'Six String'),
            'seven_string':           ('SVST', 'Seven String'),
            'eight_string':           ('EIST', 'Eight String'),
            'nine_string':            ('NIST', 'Nine String'),
            'ten_string':             ('TEST', 'Ten String'),
            'eleven_string':          ('ELST', 'Eleven String'),
            'twelve_string':          ('TVST', 'Twelve String'),
            'thirteen_string':        ('TTST', 'Thirteen String'),
            'fourteen_string':        ('FTST', 'Fourteen String'),
            'fifteen_string':         ('FFST', 'Fifteen String'),
            },
        'init':  ['NAME', 'DESC', 'VAL', 'RVAL', 'RTYP', 'DTYP'],
        'config': ['DESC', 'DTYP']
        },
    'mbbi': {
        'desc': 'Multi Binary Input',
        'reference': 'http://www.aps.anl.gov/epics/EpicsDocumentation/AppDevManuals/RecordRef/Recordref-23.html',
        'fields': {
            'value':                  ('VAL', 'value'),
            'name':                   ('NAME', 'PV Name'),
            'description':            ('DESC', 'Description'),
            'device_type':            ('DTYP', 'Device type'),
            'record_type':            ('RTYP', 'Record Type'),
            'raw_value':              ('RVAL', 'Raw Value  '),
            'input_link':             ('INP',  'Input Link'),
            'shift':                  ('SHFT', 'Shift'),
            'states_defined':         ('SDEF', 'States Defined'),
            'zero_value':             ('ZRVL', 'Zero Value'),
            'one_value':              ('ONVL', 'One Value'),
            'two_value':              ('TWVL', 'Two Value'),
            'three_value':            ('THVL', 'Three Value'),
            'four_value':             ('FRVL', 'Four Value'),
            'five_value':             ('FVVL', 'Five Value'),
            'six_value':              ('SXVL', 'Six Value'),
            'seven_value':            ('SVVL', 'Seven Value'),
            'eight_value':            ('EIVL', 'Eight Value'),
            'nine_value':             ('NIVL', 'Nine Value'),
            'ten_value':              ('TEVL', 'Ten Value'),
            'eleven_value':           ('ELVL', 'Eleven Value'),
            'twelve_value':           ('TVVL', 'Twelve Value'),
            'thirteen_value':         ('TTVL', 'Thirteen Value'),
            'fourteen_value':         ('FTVL', 'Fourteen Value'),
            'fifteen_value':          ('FFVL', 'Fifteen Value'),
            'zero_string':            ('ZRST', 'Zero String'),
            'one_string':             ('ONST', 'One String'),
            'two_string':             ('TWST', 'Two String'),
            'three_string':           ('THST', 'Three String'),
            'four_string':            ('FRST', 'Four String'),
            'five_string':            ('FVST', 'Five String'),
            'six_string':             ('SXST', 'Six String'),
            'seven_string':           ('SVST', 'Seven String'),
            'eight_string':           ('EIST', 'Eight String'),
            'nine_string':            ('NIST', 'Nine String'),
            'ten_string':             ('TEST', 'Ten String'),
            'eleven_string':          ('ELST', 'Eleven String'),
            'twelve_string':          ('TVST', 'Twelve String'),
            'thirteen_string':        ('TTST', 'Thirteen String'),
            'fourteen_string':        ('FTST', 'Fourteen String'),
            'fifteen_string':         ('FFST', 'Fifteen String'),
            },
        'init':  ['NAME', 'DESC', 'VAL', 'RVAL', 'RTYP', 'DTYP'],
        'config': ['DESC', 'DTYP']
        },
    'bi': {
        'desc':  'Binary Input',
        'usage': 'The normal use for this record type is to obtain a binary value of 0 or 1. \
                  Most device support modules obtain values from hardware and place the value in RVAL. \
                  For these devices record processing sets VAL = (0,1) if RVAL is (0, not 0). \
                  Devices support modules may optionally read a value directly into VAL.',
        'fields': {
            'value':                  ('VAL', 'value'),
#            'high_opr':               ('HOPR', 'high opr'),
#            'low_opr':                ('LOPR', 'low opr'), 
            'name':                   ('NAME', 'PV Name'),
            'description':            ('DESC', 'Description'),
            'device_type':            ('DTYP', 'Device type'),
            'record_type':            ('RTYP', 'Record Type'),
            'raw_value':              ('RVAL', 'Raw Value  '),
            'zero_name':              ('ZNAM', 'Zero Name'),
            'one_name':               ('ONAM', 'One Name'),
            },
        'init':  ['NAME', 'DESC', 'VAL', 'RVAL', 'RTYP', 'DTYP'],
        'config': ['DESC', 'DTYP']
        },
    'ao': {
        'desc':  'Analog Output',
        'usage': 'The normal use for this record type is to output values to digital-analog \
                  converters. It is used for all analog outputs to hardware. It can also be \
                  used to write floating point values to other records via database or channel \
                  access links. How the user configures the output link determines if the \
                  record sends its value to a hardware device, a channel access link, or a \
                  database link. The desired output can be controlled by either an operator \
                  or a state program, or it can be fetched from another record. ',
        'fields': {
            'value':                  ('VAL', 'value'),
            'units':                  ('EGU',  'Engineering Units '),
            'high_opr':               ('HOPR', 'high opr'),
            'low_opr':                ('LOPR', 'low opr'), 
            'precision':              ('PREC', 'Display Precision '),
            'name':                   ('NAME', 'PV Name'),
            'description':            ('DESC', 'Description'),
            'device_type':            ('DTYP', 'Device type'),
            'record_type':            ('RTYP', 'Record Type'),
            'raw_value':              ('RVAL', 'Raw Value  '),
            'raw_offset':             ('ROFF', 'Raw Offset'),
            'DRVL':                   ('DRVL', ''),
            'DRVH':                   ('DRVH', ''),
            },
        'init':  ['NAME', 'DESC', 'VAL', 'RVAL', 'EGU', 'PREC', 'RTYP', 'DTYP'],
        'config': ['DESC', 'EGU', 'PREC', 'DTYP']
        },
    'ai': {
        'desc':  'Analog Input',
        'usage': 'The normal use for this record type is to obtain an analog value from \
                  hardware and then convert it to engineering units. Most device support \
                  modules obtain values from hardware. The record supports alarm limits, \
                  conversion to engineering units, smoothing, and graphics and control limits.',
        'fields': {
            'value':                  ('VAL', 'value'),
            'units':                  ('EGU',  'Engineering Units '),
            'high_opr':               ('HOPR', 'high opr'),
            'low_opr':                ('LOPR', 'low opr'), 
            'precision':              ('PREC', 'Display Precision '),
            'name':                   ('NAME', 'PV Name'),
            'description':            ('DESC', 'Description'),
            'device_type':            ('DTYP', 'Device type'),
            'record_type':            ('RTYP', 'Record Type'),
            'raw_value':              ('RVAL', 'Raw Value  '),
            'raw_offset':             ('ROFF', 'Raw Offset'),
            'linr':                   ('LINR', 'Type of Conversion'),
            'eguf':                   ('EGUF', 'Engineering Units Full'),
            'egul':                   ('EGUL', 'Engineering Units Low'),
            'aoff':                   ('AOFF', 'Adjustment Offset'),
            'eslo':                   ('ESLO', 'Slope for Linear Conversions'),
#            'eoff':                   ('EOFF', '??'),
#            'hihi':                   ('HIHI', '??'),
#            'lolo':                   ('LOLO', '??'),
#            'high':                   ('HIGH', '??'),
#            'low':                    ('LOW', '??'),
#            'hhsv':                   ('HHSV', '??'),
#            'llsv':                   ('LLSV', '??'),
#            'hsv':                    ('HSV', '??'),
#            'lsv':                    ('LSV', '??'),
#            'hyst':                   ('HYST', '??'),
            },
        'init':  ['NAME', 'DESC', 'VAL', 'RVAL', 'EGU', 'PREC', 'RTYP', 'DTYP'],
        'config': ['DESC', 'EGU', 'PREC', 'DTYP']
        },
    'sel': {
        'desc': 'Selection',
        'usage': 'Selection Record -- Used at LCLS for Vacuum devices',
        'fields': {
            'value':                  ('VAL', 'value'),
            'units':                  ('EGU',  'Engineering Units '),
            'high_opr':               ('HOPR', 'high opr'),
            'low_opr':                ('LOPR', 'low opr'), 
            'precision':              ('PREC', 'Display Precision '),
            'name':                   ('NAME', 'PV Name'),
            'description':            ('DESC', 'Description'),
            'device_type':            ('DTYP', 'Device type'),
            'record_type':            ('RTYP', 'Record Type'),
            'select_mechanism':       ('SELM', 'Select Mechanism'),
            'select_number':          ('SELN', 'Select Number'),
            'inputA':                 ('INPA', 'Input A'),
            'inputB':                 ('INPB', 'Input B'),
            'inputC':                 ('INPC', 'Input C'),
            'inputD':                 ('INPD', 'Input D'),
            'inputE':                 ('INPE', 'Input E'),
            'inputF':                 ('INPF', 'Input F'),
            'inputG':                 ('INPG', 'Input G'),
            'inputH':                 ('INPH', 'Input H'),
            'inputI':                 ('INPI', 'Input I'),
            'inputJ':                 ('INPJ', 'Input J'),
            'inputK':                 ('INPK', 'Input K'),
            'inputL':                 ('INPL', 'Input L'),
            'Avalue':                 ('A',    'Value A'),
            'Bvalue':                 ('B',    'Value B'),
            'Cvalue':                 ('C',    'Value C'),
            'Dvalue':                 ('D',    'Value D'),
            'Evalue':                 ('E',    'Value E'),
            'Fvalue':                 ('F',    'Value F'),
            'Gvalue':                 ('G',    'Value G'),
            'Hvalue':                 ('H',    'Value H'),
            'Ivalue':                 ('I',    'Value I'),
            'Jvalue':                 ('J',    'Value J'),
            'Kvalue':                 ('K',    'Value K'),
            'Lvalue':                 ('L',    'Value L'),
            },
        'init':  ['NAME', 'DESC', 'VAL', 'EGU', 'PREC', 'RTYP', 'DTYP'],
        'config': ['DESC', 'EGU', 'PREC', 'DTYP']
        },
    'longin': {
        'desc': 'Long Input',
        'fields': {
            'value':                  ('VAL', 'value'),
            'units':                  ('EGU',  'Engineering Units '),
            'name':                   ('NAME', 'PV Name'),
            'description':            ('DESC', 'Description'),
            'device_type':            ('DTYP', 'Device type'),
            'record_type':            ('RTYP', 'Record Type'),
            },
        'init':  ['NAME', 'DESC', 'VAL', 'EGU', 'RTYP', 'DTYP'],
        'config': ['DESC', 'EGU', 'DTYP']
        },
    'longout': {
        'desc': 'Long Output',
        'fields': {
            'value':                  ('VAL', 'value'),
            'units':                  ('EGU',  'Engineering Units '),
            'name':                   ('NAME', 'PV Name'),
            'description':            ('DESC', 'Description'),
            'device_type':            ('DTYP', 'Device type'),
            'record_type':            ('RTYP', 'Record Type'),
            },
        'init':  ['NAME', 'DESC', 'VAL', 'EGU', 'RTYP', 'DTYP'],
        'config': ['DESC', 'EGU', 'DTYP']
        },
    'sub': {
        'desc': 'Subroutine',
        'fields': {
            'value':                  ('VAL', 'value'),
            'units':                  ('EGU',  'Engineering Units '),
            'high_opr':               ('HOPR', 'high opr'),
            'low_opr':                ('LOPR', 'low opr'), 
            'precision':              ('PREC', 'Display Precision '),
            'name':                   ('NAME', 'PV Name'),
            'description':            ('DESC', 'Description'),
            'device_type':            ('DTYP', 'Device type'),
            'record_type':            ('RTYP', 'Record Type'),
            'initialization_name':    ('INAM', 'Initialization Name'),
            'subroutine_name':        ('SNAM', 'Subroutine Name'),
            'subroutine_severity':    ('BRSV', 'Severity for a subroutine return value less than 0'),
            'alarm_deadband':         ('HYST', 'Alarm Deadband'),
            'archive_deadband':       ('ADEL', 'Archive Deadband'),
            'monitor_deadband':       ('MDEL', 'Monitor, i.e. value change, Deadband'),
            'inputA':                 ('INPA', 'Input A'),
            'inputB':                 ('INPB', 'Input B'),
            'inputC':                 ('INPC', 'Input C'),
            'inputD':                 ('INPD', 'Input D'),
            'inputE':                 ('INPE', 'Input E'),
            'inputF':                 ('INPF', 'Input F'),
            'inputG':                 ('INPG', 'Input G'),
            'inputH':                 ('INPH', 'Input H'),
            'inputI':                 ('INPI', 'Input I'),
            'inputJ':                 ('INPJ', 'Input J'),
            'inputK':                 ('INPK', 'Input K'),
            'inputL':                 ('INPL', 'Input L'),
            'Avalue':                 ('A',    'Value A'),
            'Bvalue':                 ('B',    'Value B'),
            'Cvalue':                 ('C',    'Value C'),
            'Dvalue':                 ('D',    'Value D'),
            'Evalue':                 ('E',    'Value E'),
            'Fvalue':                 ('F',    'Value F'),
            'Gvalue':                 ('G',    'Value G'),
            'Hvalue':                 ('H',    'Value H'),
            'Ivalue':                 ('I',    'Value I'),
            'Jvalue':                 ('J',    'Value J'),
            'Kvalue':                 ('K',    'Value K'),
            'Lvalue':                 ('L',    'Value L'),
            },
        'init':  ['NAME', 'DESC', 'VAL', 'EGU', 'RTYP', 'DTYP'],
        'config': ['DESC', 'EGU', 'DTYP'],
        'reference': 'https://wiki-ext.aps.anl.gov/epics/index.php/RRM_3-14_Subroutine',
        },
    'longSub': {
        'desc': 'Long Subprocess',
        'fields': {
            'value':                  ('VAL', 'value'),
            'units':                  ('EGU',  'Engineering Units '),
            'name':                   ('NAME', 'PV Name'),
            'description':            ('DESC', 'Description'),
            'device_type':            ('DTYP', 'Device type'),
            'record_type':            ('RTYP', 'Record Type'),
            },
        'init':  ['NAME', 'DESC', 'VAL', 'EGU', 'RTYP', 'DTYP'],
        'config': ['DESC', 'EGU', 'DTYP']
        },
    'aSub': {
        'fields': {
            'value':                  ('VAL', 'value'),
            'name':                   ('NAME', 'PV Name'),
            'description':            ('DESC', 'Description'),
            'device_type':            ('DTYP', 'Device type'),
            'record_type':            ('RTYP', 'Record Type'),
            'process':                ('PROC', 'Process'),
            'inputA':                 ('INPA', 'Input A'),
            'inputB':                 ('INPB', 'Input B'),
            'inputC':                 ('INPC', 'Input C'),
            'inputD':                 ('INPD', 'Input D'),
            'inputE':                 ('INPE', 'Input E'),
            'inputF':                 ('INPF', 'Input F'),
            'inputG':                 ('INPG', 'Input G'),
            'inputH':                 ('INPH', 'Input H'),
            'inputI':                 ('INPI', 'Input I'),
            'inputJ':                 ('INPJ', 'Input J'),
            'inputK':                 ('INPK', 'Input K'),
            'inputL':                 ('INPL', 'Input L'),
            'Avalue':                 ('A',    'Value A'),
            'Bvalue':                 ('B',    'Value B'),
            'Cvalue':                 ('C',    'Value C'),
            'Dvalue':                 ('D',    'Value D'),
            'Evalue':                 ('E',    'Value E'),
            'Fvalue':                 ('F',    'Value F'),
            'Gvalue':                 ('G',    'Value G'),
            'Hvalue':                 ('H',    'Value H'),
            'Ivalue':                 ('I',    'Value I'),
            'Jvalue':                 ('J',    'Value J'),
            'Kvalue':                 ('K',    'Value K'),
            'Lvalue':                 ('L',    'Value L'),
            },
        'init':  ['NAME', 'DESC', 'VAL', 'RTYP', 'DTYP', 'A', 'B', 'C', 'D'],
        'config': ['DESC', 'DTYP']
        },
    'hxs': {
        'desc': 'Hard X-ray Spectrometer',
        'fields': {
            'value':                  ('VAL', 'value'),
            'name':                   ('NAME', 'PV Name'),
            'description':            ('DESC', 'Description'),
            'device_type':            ('DTYP', 'Device type'),
            'record_type':            ('RTYP', 'Record Type'),
            'process':                ('PROC', 'Process'),
            'energy':                 ('XENG', 'Energy'),
            'bragg_angle':            ('BANG', 'Bragg Angle'),
            'crystal_name':           ('KRST', 'Crystal Name'),
            's110_in':                ('S110', 'S110 In'),
            's100_in':                ('S100', 'S100 In'),
            'energy_min':             ('EMIN', 'Energy Range Min'),
            'energy_max':             ('EMAX', 'Energy Range Max'),
            'vertical_beam_size':     ('XVUM', 'Vertical Beam Size'),
            'angle_offset1':          ('XTO1', 'Angle Offset 1'),
            'angle_offset2':          ('XTO2', 'Angle Offset 2'),
            'angle_offset3':          ('XTO3', 'Angle Offset 3'),
            'angle_offset4':          ('XTO4', 'Angle Offset 4'),
            'miscut1':                ('XTM1', 'Miscut 1'),
            'miscut2':                ('XTM2', 'Miscut 2'),
            'miscut3':                ('XTM3', 'Miscut 3'),
            'miscut4':                ('XTM4', 'Miscut 4'),
            'camera_xoffset1':        ('XTX1', 'Camera X Offset 1'),
            'camera_xoffset2':        ('XTX2', 'Camera X Offset 2'),
            'camera_xoffset3':        ('XTX3', 'Camera X Offset 3'),
            'camera_xoffset4':        ('XTX4', 'Camera X Offset 4'),
            },
        'init':  ['NAME', 'DESC', 'RTYP', 'XENG', 'BANG', 'KRST', 'S110', 'S100', \
                  'EMIN', 'EMAX', 'XVUM', 'ISOUT'],
        'config': ['DESC', 'XENG', 'BANG', 'KRST', 'S110', 'S100', 
                   'EMIN', 'EMAX', 'XVUM', 'ISOUT']
        },
    'default': {
            'desc': 'Default record',
            'fields': {
                    'name':                   ('NAME', 'PV Name'),
                    'description':            ('DESC', 'Description'),
                    'value':                  ('VAL',  'Value'),
                    'record_type':            ('RTYP', 'Record Type'),
                    'device_type':            ('DTYP', 'Device type'),
                    'status':                 ('STAT', 'Current Alarm Status'),
                    'severity':               ('SEVR', 'Current Alarm Severity')
            },
        'init':  ['NAME', 'DESC', 'VAL', 'RTYP', 'DTYP', 'STAT', 'SEVR'],
        'config': ['DESC', 'DTYP']
        },
    }


class SignalConfig:

    def __init__(self, pvname, rtyp=None, record_dict=record_dict):

        from ophyd.signal import EpicsSignal
        if not rtyp:
            rtyp = EpicsSignal(pvname+'.RTYP')

        rdict = record_dict.get(rtyp.value)
        if not rdict:
            rdict = record_dict.get('default')

        self._fields = rdict.get('fields')

        for attr, item in self._fields.items():
            field = item[0]
            sig = EpicsSignal(pvname+'.'+field)
            setattr(self, attr, sig)



